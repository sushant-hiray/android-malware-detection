from optparse import OptionParser
import os
import fnmatch
from xml.dom import minidom
import matplotlib.pyplot as plt

def extractapks(path):
    apkfiles = []
    fp = open("apk.txt","w")
    for root, dirnames, filenames in os.walk(path):
          for filename in fnmatch.filter(filenames, '*.apk'):
                    apkfiles.append(os.path.join(root, filename))
                    fp.write(os.path.join(root, filename))
                    fp.write("\n")
                    command = "cd apks ; apktool -q d -f "
                    command = command + os.path.join(root, filename)
                    os.system(command)
                    command = "cd apks; cd " + filename[:-4]
                    command = command  + " ; mv AndroidManifest.xml "
                    command = command + filename[:-4] + "-manifest.xml"
                    os.system(command)
    fp.close()

def parsexml(xml):
    xmldom = minidom.parse(xml)
    permlist = xmldom.getElementsByTagName('uses-permission')
    return permlist

def writeperms():
    fp = open('perm-dump.txt','w')
    fp.write('\n')
    for root, dirnames, filenames in os.walk("apks/"):
          for filename in fnmatch.filter(filenames, '*-manifest.xml'):
              permlist = parsexml(os.path.join(root,filename))
              fp.write(filename[:-13])
              fp.write(' : ')
              getallperm(permlist,fp)
              fp.write('\n')
    fp.close()

def getallperm(permlist,fp):
    for permission in permlist:
        fp.write(permission.attributes['android:name'].value)
        fp.write(' , ')

def getpermclass(permission):

    permlist=[['SET_DEBUG_APP'],
            ['PHONE_STATE','RECORD_AUDIO','INTERNET'],
            ['PROCESS_OUTGOING_CALL','RECORD_AUDIO','INTERNET'],
            ['ACCESS_FINE_LOCATION','INTERNET','RECEIVE_BOOT_COMPLETE'],
            ['ACCESS_COARSE_LOCATION','INTERNET','RECEIVE_BOOT_COMPLETE'],
            ['RECEIVE_SMS','WRITE_SMS'],
            ['SEND_SMS','WRITE_SMS'],
            ['INSTALL_SHORTCUT','UNINSTALL_SHORTCUT'],
            ['SET_PREFERRED_APPLICATION']]
    
    values=[]
    for item in permlist:
        flag = 0
        for perm in item:
            if perm  in permission:
                flag = 1
        values.append(flag)
    return values

def printclassified(data):
    fp = open('classified.txt','w')
    for i in range(0,9):
        fp.write("Rule[")
        fp.write(str(i+1))
        fp.write("] : ")
        for item in data[i]:
            fp.write(item)
            fp.write(" , ")
        fp.write("\n")
    fp.close()

def classifyperm():
    fp = open('perm-dump.txt','r')
    classified_perm = [[],[],[],[],[],[],[],[],[]]
    for line in fp:
        sp = line.split(":")
        appname = sp[0]
        permissions = sp[1].split(",")
        perm = [0,0,0,0,0,0,0,0,0]
        for permission in permissions:
            perm_ret = getpermclass(permission)
            perm = [a + b for a,b in zip(perm,perm_ret)]
        
        for i in range(0,9):
            if (perm[i] > 0):
                classified_perm[i].append(appname)

    fp.close()
    printclassified(classified_perm)
    ys = []
    for i in range(0,9):
        ys.append(len(classified_perm[i]))
    print ys
    xs = [1,2,3,4,5,6,7,8,9]
    plot.plot(xs, ys)
    plot.xlabel('Rule Numbers')
    plot.ylabel('Number of Malware Apps')
    plot.savefig("classified-apps.png")


def get_perm_index(fileread,filewrite):
    fp = open(fileread,'r')
    permlist=['SET_DEBUG_APP',
             'PHONE_STATE','RECORD_AUDIO','INTERNET',
             'PROCESS_OUTGOING_CALL',
             'ACCESS_FINE_LOCATION','RECEIVE_BOOT_COMPLETE',
             'ACCESS_COARSE_LOCATION',
             'RECEIVE_SMS','WRITE_SMS',
             'SEND_SMS',
             'INSTALL_SHORTCUT','UNINSTALL_SHORTCUT',
             'SET_PREFERRED_APPLICATION']  
    perm_index = []
    perm_name_index = []
    j = 0
    line = fp.readline()    
    permissions = line.split(",")
    for permission in permissions:
        for perm in permlist:
            if perm in permission:
                perm_index.append(j)
                perm_name_index.append(perm)
        j = j + 1
    print perm_name_index
    fp.close()
    fp = open(filewrite,'w')
    fp.write('Category,Package')
    for perm in perm_name_index:
        fp.write(',')
        fp.write(perm)
    fp.write('\n')  
    fp.close()
    return perm_index

def get_selected_perm(fileread,filewrite):
    perm_index = get_perm_index(fileread,filewrite)
    fp = open(fileread,'r')
    fw = open(filewrite,'a')
    fp.readline()
    for line in fp:
        sp = line.split(',')
        fw.write(sp[0])
        fw.write(',')
        fw.write(sp[1])
        for index in perm_index:
            fw.write(',')
            fw.write(sp[index])
        fw.write('\n')
    fw.close()
    fp.close()


def get_rule_data(fileread,filewrite):
    permlists=[[12],[5,10,4],[6],[3,8],[2],[9,13], [11],[13]]
    fw = open(filewrite,'w')
    fp = open(fileread,'r')
    fp.readline()
    for line in fp:
        sp = line.split(',')
        fw.write(sp[0]+","+sp[1]+",")
        for permlist in permlists:
            check = 0
            for perm in permlist:
                if sp[perm] == '1':
                    check = check + 1
            if check == 0:
                fw.write('0,')
            elif check == len(permlist):
                fw.write('1,')
            else:
                fw.write('2,')
        fw.write("\n")

def print_rule_data(file_read,img):
    fp = open(file_read,'r')
    data_0_fin = [0,0,0,0,0,0,0,0]
    data_1_fin = [0,0,0,0,0,0,0,0]
    data_2_fin = [0,0,0,0,0,0,0,0]
    xs =   [1,2,3,4,5,6,7,8]
    for line in fp:
        sp = line.split(',')
        sp.pop(0)
        sp.pop(0)
        data_0 = []
        data_1 = []
        data_2 = []
        for rule in sp:
            if rule == '0':
                data_0.append(1)
                data_1.append(0)
                data_2.append(0)
            elif rule == '1':
                data_0.append(0)
                data_1.append(1)
                data_2.append(0)
            elif rule =='2':
                data_0.append(0)
                data_1.append(0)
                data_2.append(1)
        data_0_fin = [sum(x) for x in zip(data_0_fin, data_0)]
        data_1_fin = [sum(x) for x in zip(data_1_fin, data_1)]
        data_2_fin = [sum(x) for x in zip(data_2_fin, data_2)]
   
    fig, ax = plt.subplots()
    ax.plot(xs, data_0_fin, 'g--', label='Following kirin rules')
    ax.plot(xs, data_1_fin, 'r--', label='False positives')
    ax.plot(xs, data_2_fin, 'b--', label='Not following a subset of the rule')
    # The frame is matplotlib.patches.Rectangle instance surrounding the legend.
    legend = ax.legend(loc='center right', shadow=False)
    frame = legend.get_frame()


    plt.xlabel('Rule Numbers')
    plt.ylabel('Number of Apps')
    plt.savefig(img)
    

if __name__ == '__main__':
    parser = OptionParser()
    parser.add_option("-a","--all", action="store_true", dest="all", default=None, help="Run the entire script")
    parser.add_option("-p", "--process", action="store_true", dest="process", default=None, help="Processing xmls")
    parser.add_option("-e", "--extract", action="store_true", dest="extract", default=None, help="Extractin xmls from apk")
    parser.add_option("-d", "--clean", action="store_true", dest="clean", default=None, help="Clean previous processed files")
    parser.add_option("-c", "--classify", action="store_true", dest="classify", default=None, help="Classify the permissions")
    (options, args) = parser.parse_args()

    if options.all:
        options.process = options.extract = options.classify = True

    if options.extract:
        print "Extracting apks"
        path="/home/sushant/code/"
        extractapks(path)
        print "Done extracting"

    if options.process:
        print "Processing all the apks"
        writeperms()
        print "Done processing: check file `perm-dump.txt`"

    if options.clean:
        print "Cleaning Up"

    if options.classify:
        #classifyperm()
        get_selected_perm('../android_data/2011FullData.csv','../android_data/2011SelectedData.csv')
        get_rule_data('../android_data/2011SelectedData.csv','../android_data/2011RuleData.csv')
        print_rule_data('../android_data/2011RuleData.csv','2011Stats.png')
        get_selected_perm('../android_data/2012FullData.csv','../android_data/2012SelectedData.csv')
        get_rule_data('../android_data/2012SelectedData.csv','../android_data/2012RuleData.csv')
        print_rule_data('../android_data/2012RuleData.csv','2012Stats.png')

